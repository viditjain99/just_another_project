#Assembler project
#Vidit Jain 2017370
#Sankalp Agrawal 2017363

We have partially designed an assembler which will take an assembly code as input, and will output 
the machine code, in a seperate text file.

We have assumed this format for the assembly language program.
Label/symbol    Opcode    Operands	Comments

Also, each section will be seperated by tabspace(\t). 
If not, our code will generate runtime errors.

We have generated the Symbol table, Literal Table, Opcode table and some errors.

We have a problem that when an immediate address(literal) is used as an operand, and there is no way we can specify the addressing mode, so the binary value for the literal in the operand part of the instruction may be mistaken as a memory address.

We have handled these errors- 
1) When an opcode is not given
2) Opcode is invalid (opcode is not present in the given set of opcodes)
3) An opcode is used as a symbol
4) A symbol is defined more than once
5) Opcode is supplied with too many operands
6) Opcode is supplied with less number of operands than required
7) STP statement not used

Format of Symbol Table
Symbol    Memory address(in binary)    value of symbol

Each section is tabspace(\t) seperated.

Format of Literal Table
Literal    Memory address(in binary)

Each section is tabspace(\t) seperated.

To run the code, the input file must be named as 'inputAssemblyCode.txt'.

We are yet to handle the error that a symbol is used which has not been defined. It will be done when we write the code for pass2.